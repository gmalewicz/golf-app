buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath ('org.liquibase:liquibase-core:4.31.1')
    }
}

plugins {
    id 'org.springframework.boot' version '3.4.5'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'application'
    id 'org.liquibase.gradle' version '3.0.2'
    id 'org.sonarqube' version '6.2.0.5505'
    id 'jacoco'
    id 'idea'
}

group = 'com.greg.golf'
version = '3.9.1'
description = 'libraries update & remove mail server from health check'

processResources {
    filesMatching("**/*.yml") {
        expand project.properties
    }
}

application {
    mainClass.set('com.greg.golf.Golf')
}

tasks.named("jar") {
    enabled = false
}

jacoco {
    toolVersion = '0.8.11'
}

jacocoTestReport {
    reports {
        xml.required = true
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_21
}

repositories {
    mavenCentral()
}

diffChangelog.dependsOn compileJava


liquibase {
    activities {
        main {
            changelogFile './src/main/resources/db/dbChangeLog-diff.xml'
            driver 'org.postgresql.Driver'
            url 'jdbc:postgresql://localhost:5432/golf'
            excludeObjects 'cycle_result'
            referenceUrl 'hibernate:spring:com.greg.golf.entity?dialect=org.hibernate.dialect.PostgreSQLDialect'
            referenceDriver 'liquibase.ext.hibernate.database.connection.HibernateDriver'
            if (project.hasProperty("jdbcUsername")) {
                username project.getProperty('jdbcUsername')
            }
            if (project.hasProperty("jdbcPassword")) {
                password project.getProperty('jdbcPassword')
            }
            logLevel 'debug'
            verbose 'true'
        }
    }
}


dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-log4j2'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

    implementation 'org.springframework:spring-websocket'
    implementation 'org.springframework:spring-messaging'
    implementation 'org.springframework.security:spring-security-messaging'
    implementation 'org.postgresql:postgresql'
    implementation 'io.hypersistence:hypersistence-utils-hibernate-63:3.9.5'
    implementation 'com.google.guava:guava:33.4.8-jre'
    implementation 'org.modelmapper:modelmapper:3.2.2'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.8'
    implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
    implementation 'org.liquibase:liquibase-core'

    compileOnly "org.projectlombok:lombok"

    annotationProcessor "org.projectlombok:lombok"
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.6'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    testCompileOnly "org.projectlombok:lombok"

    testAnnotationProcessor "org.projectlombok:lombok"

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.testcontainers:postgresql'
    testImplementation 'org.springframework.security:spring-security-test'

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    liquibaseRuntime 'org.liquibase:liquibase-core:4.31.1'
    liquibaseRuntime 'org.liquibase.ext:liquibase-hibernate6:4.31.1'
    liquibaseRuntime 'org.postgresql:postgresql'
    liquibaseRuntime 'info.picocli:picocli:4.7.6'
    liquibaseRuntime 'org.yaml:snakeyaml:2.4'
    liquibaseRuntime 'javax.xml.bind:jaxb-api:2.4.0-b180830.0359'
    liquibaseRuntime 'org.postgresql:postgresql'
    liquibaseRuntime 'org.springframework.boot:spring-boot-starter-data-jpa'
    liquibaseRuntime 'io.hypersistence:hypersistence-utils-hibernate-63:3.9.5'
    liquibaseRuntime 'com.fasterxml.jackson.core:jackson-databind:2.19.0'
    liquibaseRuntime sourceSets.main.output
}

configurations.implementation {
    exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
}

configurations.testImplementation {
    exclude group: 'org.springframework.boot', module: 'junit'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

tasks.withType(Javadoc).configureEach {
    options.encoding = 'UTF-8'
}

test {
    useJUnitPlatform()
    filter {
        // com.greg.golf.service.AssPlayerTest
        if (project.hasProperty('excludeTests')) {
            excludeTestsMatching(project.property('excludeTests'))
        }
    }
    finalizedBy jacocoTestReport // report is always generated after tests run
}

sonar {
    properties {
        property 'sonar.projectKey', 'golf-app'
        property 'sonar.organization', 'gmalewicz'
        property 'sonar.host.url', 'https://sonarcloud.io'
        property 'sonar.java.source', '17'
        property 'sonar.sources', 'src/main/java,src/main/resources/templates'
        property 'sonar.java.binaries', 'build/classes'
        property 'sonar.sourceEncoding', 'UTF-8'
        property 'sonar.exclusions', '.git/**,.settings/**,build/**,.build'
        property 'sonar.java.coveragePlugin', 'jacoco'
        property 'sonar.coverage.jacoco.xmlReportPath', 'build/reports/jacoco/test/jacocoTestReport.xml'
        property 'sonar.gradle.skipCompile', 'true'
    }
}

tasks['sonar'].with {
    dependsOn build
}
