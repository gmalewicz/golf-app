# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java GOLF CI with Maven

on:
  push:
    branches: [ master ]
    tags:
     - '**' 
  pull_request:
    branches: [ master ]
    
env:
  VERSION_EXP: git describe --tags --always --first-parent --dirty  
  ORGANIZATION: ${{ github.repository_owner }} 
  IMAGE: ${{ github.repository_owner }}/${{ github.event.repository.name }}

jobs:
  build:

    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      
    - name: Set up JDK 1.13
      uses: actions/setup-java@v1
      with:
        java-version: 1.13
                
    - name: Cache local Maven repository
      uses: actions/cache@v2
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
                
    - name: Buiild & analyze with SonarCloud
      run: mvn -B verify sonar:sonar --file ./pom.xml
        -Dsonar.organization=gmalewicz 
        -Dsonar.host.url=https://sonarcloud.io 
        -Dsonar.login=$SONAR_TOKEN 
        -Dsonar.projectName=gmalewicz_golf-app
        -Dsonar.java.source=13
        -Dsonar.sources=src/main/java,src/main/resources/templates
        -Dsonar.java.binaries=target/classes
        -Dsonar.sourceEncoding=UTF-8
        -Dsonar.exclusions=.git/**,.settings/**,target/**
          --file ./pom.xml 
      env:
        google_recaptcha_key_site: 6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI
        google_recaptcha_key_secret: ${{secrets.GOOGLE_RECAPTCHA_KEY_SECRET}}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }} 
              
    - name: Rename the file 
      #if: startsWith(github.ref, 'refs/tags/')
      if: always()
      run: |
        cp ./target/golf-*.jar ./target/golf.jar
             
    - name: Set up version
      if: always()
      #if: startsWith(github.ref, 'refs/tags/')
      run: echo "VERSION=$($VERSION_EXP)" >> $GITHUB_ENV   
      
    - name: Install doctl
      #if: startsWith(github.ref, 'refs/tags/')
      if: always()
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITAL_OCEAN_TOKEN }}
      
    - name: Assemble image
      if: always()
      #if: startsWith(github.ref, 'refs/tags/')
      run: docker build -t $IMAGE:$VERSION -t $IMAGE:latest .
       
    - name: Publish image
      #if: startsWith(github.ref, 'refs/tags/')
      if: always()
      run: |
        echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u $ORGANIZATION --password-stdin
        docker push $IMAGE:$VERSION
        docker push $IMAGE:latest
      
    - name: Update deployment file
      #if: startsWith(github.ref, 'refs/tags/')
      if: always()
      run: TAG=$VERSION && sed -i 's|<IMAGE>|$IMAGE:'${TAG}'|' $GITHUB_WORKSPACE/config/deployment.yml

    - name: Save DigitalOcean kubeconfig with short-lived credentials
      #if: startsWith(github.ref, 'refs/tags/')
      if: always()
      run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 golf

     # temporary as node is very small
    - name: Remove existing deployment
      #if: startsWith(github.ref, 'refs/tags/')
      if: always()
      run: kubectl delete deployment golf-app

    - name: Deploy to DigitalOcean Kubernetes
      #if: startsWith(github.ref, 'refs/tags/')
      if: always()
      run: kubectl apply -f $GITHUB_WORKSPACE/config/deployment.yml

    - name: Verify deployment
      #if: startsWith(github.ref, 'refs/tags/')
      if: always()
      run: kubectl rollout status deployment/golf-app



